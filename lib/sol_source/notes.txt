


NOTES FROM CALL ~2/11
----------------------

"Secret Agency"

Some souls should be able to create other sols, some not.
capacity to create sub-souls should be visible in DNA.


mc_sol
mc_sol+nads < mc_sol

# archiving
like archive.org; it would be possible to archive all the flows
perhaps all state-changing flows.
done in distributed "seti-like" manner,
anyone could volunteer to be an archival node
then just need a managament service to balance replicaton/redundancy

# routing
using mc_sol as router- breath of "can you pass this along"


# sol 'forking' or 'inheritance'
rather than inheriting from parent sols through the ruby class mechanism,
sols should perform a fork or inherit operation from a live sol on the network.  
this allows for a 'fingerprinting' operation that signs what sol we forked from 
and who did the instantiation.


ORIGINAL API SKETCHES FROM mcny10
-------------------------------------

# Scenario: Creating my own new sol from scratch: First Breath
my_sol, my_private_key = Sol.I_am  # exhales I-amness with MC Sol

# Namaste World
mc_sol = Sol.find_by_name('MC Sol')
my_sol.exhale mc_sol, :namaste
  # record in the substrate and outstanding :namaste request

your_egg = Sol.new(McLib.load_dna('rating')) do |substrate|
  # initialize substrate
end


my_sol.exhale(your_egg, :you_are)
#your_sol, your_private_key = 

my_sol.exhale(your_sol, :who_are_you?)
#your_dna, your_init_params = 

my_sol.exhale(your_sol, :sup?)
#your_state = 

Flow.exhale( my_sol, your_sol, :sup? )


my_sol.state  # current state

my_sol.dna   # dna
my_sol.init_params  # initial params
my_sol.egg # initial state created by dna and init_params

my_sol.breaths # list of breaths?


# -------------------------------
