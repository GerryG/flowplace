class Sol
  attr_accessor :name, :dna, :substrate, :transforms
  
  # list of spirations autogenerated from filenames in directory of this sol
  # and all supersols
  def initialize name, dna, params={}
    @name, @dna = name, dna
    @breaths = dna[:breath]
    @substrate = dna[:substrate].new
    @transforms = dna[:transform].map {|x| x.new( self ) }
    #params.call( @substrate )
  end
  
  def exhale to, breath_class, *body
    breath = Breath.const_get(breath_class.to_s.camelize).new( to, from=self, body )    
    # in the network version, breath will be serialized and deserialized & passed
    # to inhale on the other side.
    @substrate.exhale_log << breath 
    Network.transpire to, breath
    integrate
  end

  # Called by Flow (delivering breath)
  def inhale breath 
    # permissions
    #if spirations.classes.include? breath.class
      @substrate.inhale_log << breath
      integrate
    #else
      # handle unknown / bogus breaths
    #end
  end
  
  def integrate
    transforms.each { |t| t.morph }
  end
  
  def self.I_am
    sol = self.new
    sol.spirations = classes_for(:breath)
    sol.substrate = Substrate::Base.new
    sol.transforms = classes_for(:transform).map {|x| x.new }
  end
end



